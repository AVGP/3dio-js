{"version":3,"sources":["../src/polyfills.js","../node_modules/js-logger/src/logger.js","../src/base3d.js"],"names":["undefined","Number","EPSILON","Math","pow","console","log","isInteger","value","isFinite","floor","sign","x","Function","prototype","name","Object","defineProperty","get","this","toString","match","assign","target","TypeError","output","index","arguments","length","source","nextKey","hasOwnProperty","call","global","Logger","VERSION","logHandler","contextualLoggersByNameMap","bind","scope","func","apply","merge","key","i","args","defineLogLevel","DEBUG","INFO","TIME","WARN","ERROR","OFF","ContextualLogger","defaultContext","context","setLevel","filterLevel","info","newLevel","enabledFor","lvl","debug","invoke","warn","error","time","label","timeEnd","level","msgArgs","globalLogger","L","setHandler","createDefaultHandler","options","formatter","messages","unshift","timerStartTimeByLabelMap","invokeConsoleMethod","hdlr","Array","slice","timerLabel","Date","getTime","useDefaults","defaultLevel","module","exports","_prevLogger","noConflict","base3d","utils"],"mappings":"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","sourcesContent":["// based on https://raw.githubusercontent.com/mrdoob/three.js/dev/src/polyfills.js\n\nif (Number.EPSILON === undefined) {\n  Number.EPSILON = Math.pow(2, -52);\n}\n\nconsole.log('kkkkk')\n\nif (Number.isInteger === undefined) {\n  // Missing in IE\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n  Number.isInteger = function (value) {\n    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value\n  }\n}\n\nif (Math.sign === undefined) {\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n  Math.sign = function (x) {\n    return ( x < 0 ) ? -1 : ( x > 0 ) ? 1 : +x\n  }\n}\n\nif (Function.prototype.name === undefined) {\n  // Missing in IE\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n  Object.defineProperty(Function.prototype, 'name', {\n    get: function () {\n      return this.toString().match(/^\\s*function\\s*([^\\(\\s]*)/)[1]\n    }\n  })\n}\n\nif (Object.assign === undefined) {\n  // Missing in IE\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n  (function () {\n    Object.assign = function (target) {\n      'use strict';\n      if (target === undefined || target === null) {\n        throw new TypeError('Cannot convert undefined or null to object')\n      }\n      var output = Object(target)\n      for (var index = 1; index < arguments.length; index++) {\n        var source = arguments[index]\n        if (source !== undefined && source !== null) {\n          for (var nextKey in source) {\n            if (Object.prototype.hasOwnProperty.call(source, nextKey)) {\n              output[nextKey] = source[nextKey]\n            }\n          }\n        }\n      }\n      return output\n    }\n  })()\n}","/*!\r\n * js-logger - http://github.com/jonnyreeves/js-logger\r\n * Jonny Reeves, http://jonnyreeves.co.uk/\r\n * js-logger may be freely distributed under the MIT license.\r\n */\r\n(function (global) {\r\n\t\"use strict\";\r\n\r\n\t// Top level module for the global, static logger instance.\r\n\tvar Logger = { };\r\n\r\n\t// For those that are at home that are keeping score.\r\n\tLogger.VERSION = \"1.3.0\";\r\n\r\n\t// Function which handles all incoming log messages.\r\n\tvar logHandler;\r\n\r\n\t// Map of ContextualLogger instances by name; used by Logger.get() to return the same named instance.\r\n\tvar contextualLoggersByNameMap = {};\r\n\r\n\t// Polyfill for ES5's Function.bind.\r\n\tvar bind = function(scope, func) {\r\n\t\treturn function() {\r\n\t\t\treturn func.apply(scope, arguments);\r\n\t\t};\r\n\t};\r\n\r\n\t// Super exciting object merger-matron 9000 adding another 100 bytes to your download.\r\n\tvar merge = function () {\r\n\t\tvar args = arguments, target = args[0], key, i;\r\n\t\tfor (i = 1; i < args.length; i++) {\r\n\t\t\tfor (key in args[i]) {\r\n\t\t\t\tif (!(key in target) && args[i].hasOwnProperty(key)) {\r\n\t\t\t\t\ttarget[key] = args[i][key];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn target;\r\n\t};\r\n\r\n\t// Helper to define a logging level object; helps with optimisation.\r\n\tvar defineLogLevel = function(value, name) {\r\n\t\treturn { value: value, name: name };\r\n\t};\r\n\r\n\t// Predefined logging levels.\r\n\tLogger.DEBUG = defineLogLevel(1, 'DEBUG');\r\n\tLogger.INFO = defineLogLevel(2, 'INFO');\r\n\tLogger.TIME = defineLogLevel(3, 'TIME');\r\n\tLogger.WARN = defineLogLevel(4, 'WARN');\r\n\tLogger.ERROR = defineLogLevel(8, 'ERROR');\r\n\tLogger.OFF = defineLogLevel(99, 'OFF');\r\n\r\n\t// Inner class which performs the bulk of the work; ContextualLogger instances can be configured independently\r\n\t// of each other.\r\n\tvar ContextualLogger = function(defaultContext) {\r\n\t\tthis.context = defaultContext;\r\n\t\tthis.setLevel(defaultContext.filterLevel);\r\n\t\tthis.log = this.info;  // Convenience alias.\r\n\t};\r\n\r\n\tContextualLogger.prototype = {\r\n\t\t// Changes the current logging level for the logging instance.\r\n\t\tsetLevel: function (newLevel) {\r\n\t\t\t// Ensure the supplied Level object looks valid.\r\n\t\t\tif (newLevel && \"value\" in newLevel) {\r\n\t\t\t\tthis.context.filterLevel = newLevel;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// Is the logger configured to output messages at the supplied level?\r\n\t\tenabledFor: function (lvl) {\r\n\t\t\tvar filterLevel = this.context.filterLevel;\r\n\t\t\treturn lvl.value >= filterLevel.value;\r\n\t\t},\r\n\r\n\t\tdebug: function () {\r\n\t\t\tthis.invoke(Logger.DEBUG, arguments);\r\n\t\t},\r\n\r\n\t\tinfo: function () {\r\n\t\t\tthis.invoke(Logger.INFO, arguments);\r\n\t\t},\r\n\r\n\t\twarn: function () {\r\n\t\t\tthis.invoke(Logger.WARN, arguments);\r\n\t\t},\r\n\r\n\t\terror: function () {\r\n\t\t\tthis.invoke(Logger.ERROR, arguments);\r\n\t\t},\r\n\r\n\t\ttime: function (label) {\r\n\t\t\tif (typeof label === 'string' && label.length > 0) {\r\n\t\t\t\tthis.invoke(Logger.TIME, [ label, 'start' ]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttimeEnd: function (label) {\r\n\t\t\tif (typeof label === 'string' && label.length > 0) {\r\n\t\t\t\tthis.invoke(Logger.TIME, [ label, 'end' ]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// Invokes the logger callback if it's not being filtered.\r\n\t\tinvoke: function (level, msgArgs) {\r\n\t\t\tif (logHandler && this.enabledFor(level)) {\r\n\t\t\t\tlogHandler(msgArgs, merge({ level: level }, this.context));\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Protected instance which all calls to the to level `Logger` module will be routed through.\r\n\tvar globalLogger = new ContextualLogger({ filterLevel: Logger.OFF });\r\n\r\n\t// Configure the global Logger instance.\r\n\t(function() {\r\n\t\t// Shortcut for optimisers.\r\n\t\tvar L = Logger;\r\n\r\n\t\tL.enabledFor = bind(globalLogger, globalLogger.enabledFor);\r\n\t\tL.debug = bind(globalLogger, globalLogger.debug);\r\n\t\tL.time = bind(globalLogger, globalLogger.time);\r\n\t\tL.timeEnd = bind(globalLogger, globalLogger.timeEnd);\r\n\t\tL.info = bind(globalLogger, globalLogger.info);\r\n\t\tL.warn = bind(globalLogger, globalLogger.warn);\r\n\t\tL.error = bind(globalLogger, globalLogger.error);\r\n\r\n\t\t// Don't forget the convenience alias!\r\n\t\tL.log = L.info;\r\n\t}());\r\n\r\n\t// Set the global logging handler.  The supplied function should expect two arguments, the first being an arguments\r\n\t// object with the supplied log messages and the second being a context object which contains a hash of stateful\r\n\t// parameters which the logging function can consume.\r\n\tLogger.setHandler = function (func) {\r\n\t\tlogHandler = func;\r\n\t};\r\n\r\n\t// Sets the global logging filter level which applies to *all* previously registered, and future Logger instances.\r\n\t// (note that named loggers (retrieved via `Logger.get`) can be configured independently if required).\r\n\tLogger.setLevel = function(level) {\r\n\t\t// Set the globalLogger's level.\r\n\t\tglobalLogger.setLevel(level);\r\n\r\n\t\t// Apply this level to all registered contextual loggers.\r\n\t\tfor (var key in contextualLoggersByNameMap) {\r\n\t\t\tif (contextualLoggersByNameMap.hasOwnProperty(key)) {\r\n\t\t\t\tcontextualLoggersByNameMap[key].setLevel(level);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Retrieve a ContextualLogger instance.  Note that named loggers automatically inherit the global logger's level,\r\n\t// default context and log handler.\r\n\tLogger.get = function (name) {\r\n\t\t// All logger instances are cached so they can be configured ahead of use.\r\n\t\treturn contextualLoggersByNameMap[name] ||\r\n\t\t\t(contextualLoggersByNameMap[name] = new ContextualLogger(merge({ name: name }, globalLogger.context)));\r\n\t};\r\n\r\n\t// CreateDefaultHandler returns a handler function which can be passed to `Logger.setHandler()` which will\r\n\t// write to the window's console object (if present); the optional options object can be used to customise the\r\n\t// formatter used to format each log message.\r\n\tLogger.createDefaultHandler = function (options) {\r\n\t\toptions = options || {};\r\n\r\n\t\toptions.formatter = options.formatter || function defaultMessageFormatter(messages, context) {\r\n\t\t\t// Prepend the logger's name to the log message for easy identification.\r\n\t\t\tif (context.name) {\r\n\t\t\t\tmessages.unshift(\"[\" + context.name + \"]\");\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Map of timestamps by timer labels used to track `#time` and `#timeEnd()` invocations in environments\r\n\t\t// that don't offer a native console method.\r\n\t\tvar timerStartTimeByLabelMap = {};\r\n\r\n\t\t// Support for IE8+ (and other, slightly more sane environments)\r\n\t\tvar invokeConsoleMethod = function (hdlr, messages) {\r\n\t\t\tFunction.prototype.apply.call(hdlr, console, messages);\r\n\t\t};\r\n\r\n\t\t// Check for the presence of a logger.\r\n\t\tif (typeof console === \"undefined\") {\r\n\t\t\treturn function () { /* no console */ };\r\n\t\t}\r\n\r\n\t\treturn function(messages, context) {\r\n\t\t\t// Convert arguments object to Array.\r\n\t\t\tmessages = Array.prototype.slice.call(messages);\r\n\r\n\t\t\tvar hdlr = console.log;\r\n\t\t\tvar timerLabel;\r\n\r\n\t\t\tif (context.level === Logger.TIME) {\r\n\t\t\t\ttimerLabel = (context.name ? '[' + context.name + '] ' : '') + messages[0];\r\n\r\n\t\t\t\tif (messages[1] === 'start') {\r\n\t\t\t\t\tif (console.time) {\r\n\t\t\t\t\t\tconsole.time(timerLabel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttimerStartTimeByLabelMap[timerLabel] = new Date().getTime();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (console.timeEnd) {\r\n\t\t\t\t\t\tconsole.timeEnd(timerLabel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tinvokeConsoleMethod(hdlr, [ timerLabel + ': ' +\r\n\t\t\t\t\t\t\t(new Date().getTime() - timerStartTimeByLabelMap[timerLabel]) + 'ms' ]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// Delegate through to custom warn/error loggers if present on the console.\r\n\t\t\t\tif (context.level === Logger.WARN && console.warn) {\r\n\t\t\t\t\thdlr = console.warn;\r\n\t\t\t\t} else if (context.level === Logger.ERROR && console.error) {\r\n\t\t\t\t\thdlr = console.error;\r\n\t\t\t\t} else if (context.level === Logger.INFO && console.info) {\r\n\t\t\t\t\thdlr = console.info;\r\n\t\t\t\t}\r\n\r\n\t\t\t\toptions.formatter(messages, context);\r\n\t\t\t\tinvokeConsoleMethod(hdlr, messages);\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t// Configure and example a Default implementation which writes to the `window.console` (if present).  The\r\n\t// `options` hash can be used to configure the default logLevel and provide a custom message formatter.\r\n\tLogger.useDefaults = function(options) {\r\n\t\tLogger.setLevel(options && options.defaultLevel || Logger.DEBUG);\r\n\t\tLogger.setHandler(Logger.createDefaultHandler(options));\r\n\t};\r\n\r\n\t// Export to popular environments boilerplate.\r\n\tif (typeof define === 'function' && define.amd) {\r\n\t\tdefine(Logger);\r\n\t}\r\n\telse if (typeof module !== 'undefined' && module.exports) {\r\n\t\tmodule.exports = Logger;\r\n\t}\r\n\telse {\r\n\t\tLogger._prevLogger = global.Logger;\r\n\r\n\t\tLogger.noConflict = function () {\r\n\t\t\tglobal.Logger = Logger._prevLogger;\r\n\t\t\treturn Logger;\r\n\t\t};\r\n\r\n\t\tglobal.Logger = Logger;\r\n\t}\r\n}(this));\r\n","import './polyfills.js'\nimport Logger from 'js-logger'\n\nLogger.useDefaults()\nvar log = Logger\n\nvar base3d =  function() {\n  console.log('hello worlooooo')\n  Logger.info('hello world')\n}\n\nbase3d.utils = {}\n\nexport default base3d"]}